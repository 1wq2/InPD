main.py 
#!/usr/bin/env python

from device_manager import DeviceManager

if __name__ == '__main__':
    import sys

    from PyQt5.QtWidgets import QApplication

    app = QApplication(sys.argv)

    dev_manager = DeviceManager()
    dev_manager.show()

sys.exit(app.exec_())


__________

device_finder.py

import os


class DeviceFinder:

    """Collects info about connected devices"""

    def __init__(self):
        pass

    def get_usb_table(self):
        """Return list of connected devices
        Each line contains:
        <field> -- <example>
        device name -- /dev/sdX
        device label -- MyAwesomeDrive
        device mount point -- /mnt/usb
        total drive space in GiB -- 4.65 GiB
        used drive space
        free drive space
        """
        usb_set = self.get_device_list_by_path()
        block_device_list = self.get_device_list_by_label()

        usb_set = sorted(usb_set)
        usb_table = list()
        for device in usb_set:
            for element in block_device_list:
                if device == element[0]:
                    usb_table.append(element)
                    break
        usb_table = self.find_dev_mount_point(usb_table)
        return usb_table

    def find_dev_mount_point(self, usb_table):
        """Adds mount point and disk usage fields for mounted devices
        Keyword arguments:
        usb_table -- table with connected devices info
        Return: modified usb_table
        """
        mounts = open("/proc/mounts")
        mount_lines = mounts.readlines()
        table = usb_table
        i = 0
        for device in table:
            for line in mount_lines:
                arguments = line.split(" ")
                if arguments[0] == device[0]:
                    usb_table[i].append(arguments[1])
                    usb_table[i] = self.get_drive_stat(usb_table[i])
                    break
            i += 1
        return usb_table

    def get_drive_stat(self, table_row):
        """Add disk usage info(total/used/free) about mounted device"""
        statvfs = os.statvfs(table_row[2])
        bytes_in_gigabytes = 1024 ** 3
        total = statvfs.f_frsize * statvfs.f_blocks / bytes_in_gigabytes
        # free space for ordinary users (excl. reserved)
        free = statvfs.f_frsize * statvfs.f_bavail / bytes_in_gigabytes
        used = total - free
        for item in [total, free, used]:
            table_row.append(str("%.2f" % item + " GiB"))
        return table_row

    def get_device_list_by_label(self):
        """Find connected usb drives"""
        by_label_dir = "/dev/disk/by-id/"
        block_devices = os.listdir(by_label_dir)
        block_device_list = list()
        for device in block_devices:
            block_device_list.append([os.path.abspath(by_label_dir + os.readlink(by_label_dir + device)),
                                      device])
        return block_device_list

    def get_device_list_by_path(self):
        """Find corresponding device labels"""
        by_path_dir = "/dev/disk/by-path/"
        disk_list = os.listdir(by_path_dir)
        usb_set = set()
        for device in disk_list:
            if device.find("usb") != -1:
                path = os.readlink(by_path_dir + device)
                abs_path = os.path.abspath(by_path_dir + path)
                usb_set.add(abs_path)
        return usb_set

    def get_mtp_devices(self):
        #os.system("mtp-detect > output")
        output = open("output")
        output_lines = output.readlines()
        mtp_list = list()
        first_storage_flag = False
        device = list()
        bytes_in_gigabytes = 1024 ** 3
        total = 0
        for line in output_lines:
            if line.find("Manufacturer") != -1:
                device.clear()
                device.append(" ".join(line.split()[1:]))
                first_storage_flag = False
            if line.find("Model") != -1:
                device.append(" ".join(line.split()[1:]))
            if line.find("MaxCapacity") != -1:
                total = float(line.split()[1]) / bytes_in_gigabytes
                device.append("%.2f" % total + " G")
            if line.find("FreeSpaceInBytes") != -1:
                free = float(line.split()[1]) / bytes_in_gigabytes
                device.append("%.2f" % free + " G")
                device.append("%.2f" % (total - free) + " G")
            if line.find("StorageDescription") != -1:
                if not first_storage_flag:
                    device.append(" ".join(line.split()[1:]))
                    first_storage_flag = True
                    mtp_list.append(device.copy())
        return mtp_list

_________

device manager

from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QAbstractItemView, QVBoxLayout
from PyQt5.QtWidgets import QWidget, QLabel, QTextBrowser, QTableWidget, QGridLayout, QTableWidgetItem, QPushButton
from device_finder import DeviceFinder
from PyQt5.Qt import Qt
import os


class DeviceManager(QWidget):

    """Widget for device management"""

    usb_table = list()
    # in ms
    table_update_interval = 1000
    dev_finder = DeviceFinder()

    def __init__(self, parent=None):
        """Adds elements to widget"""
        super(DeviceManager, self).__init__(parent)

        block_device_table_label = QLabel("Block devices:")
        mtp_device_table_label = QLabel("MTP devices:")
        connection_log_label = QLabel("Device connection log:")

        self.unmount_button = QPushButton("Unmount selected drives")
        self.reload_mtp_list_button = QPushButton("Reload MTP list")
        self.connection_log = QTextBrowser()

        self.block_device_table_widget = QTableWidget()
        self.mtp_device_table_widget = QTableWidget()
        self.block_header = ["Device", "Label", "Mount point", "Total", "Free", "Used"]
        self.mtp_header = ["Manufacturer", "Model", "Total", "Free", "Used", "Storage Description"]

        self.table_view_setup(self.block_device_table_widget, self.block_header)
        self.table_view_setup(self.mtp_device_table_widget, self.mtp_header)

        self.main_layout_init(block_device_table_label, connection_log_label, mtp_device_table_label)
        self.setWindowTitle("USB Manager")

        self.usb_table = self.dev_finder.get_usb_table()
        self.update_table_widget(self.usb_table)
        self.reload_device_table()

        self.unmount_button.pressed.connect(self.unmount_button_handler)
        self.reload_mtp_list_button.pressed.connect(self.reload_mtp_list_button_handler)

    def table_view_setup(self, table_widget, header):
        table_widget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        table_widget.setColumnCount(len(header))
        table_widget.setHorizontalHeaderLabels(header)
        table_widget.setSelectionBehavior(QAbstractItemView.SelectRows)

    def reload_mtp_list_button_handler(self):
        mtp_list = self.dev_finder.get_mtp_devices()
        self.mtp_device_table_widget.clear()
        self.mtp_device_table_widget.setHorizontalHeaderLabels(self.mtp_header)
        self.mtp_device_table_widget.setRowCount(len(mtp_list))
        i = 0
        for device in mtp_list:
            j = 0
            for field in device:
                self.mtp_device_table_widget.setItem(i, j, QTableWidgetItem(field))
                j += 1
            i += 1

    def main_layout_init(self, block_device_table_label, connection_log_label, mtp_device_table_label):
        grid_layout = self.grid_layout_init(block_device_table_label, mtp_device_table_label)
        vbox_layout = self.vbox_layout_init(connection_log_label)
        main_layout = QGridLayout()
        main_layout.addLayout(grid_layout, 0, 0)
        main_layout.addLayout(vbox_layout, 1, 0)
        self.setLayout(main_layout)

    def vbox_layout_init(self, connection_log_label):
        vbox_layout = QVBoxLayout()
        vbox_layout.addWidget(connection_log_label)
        vbox_layout.addWidget(self.connection_log)
        return vbox_layout

    def grid_layout_init(self, block_device_table_label, mtp_device_table_label):
        grid_layout = QGridLayout()
        grid_layout.addWidget(block_device_table_label, 0, 0, Qt.AlignCenter)
        grid_layout.addWidget(mtp_device_table_label, 0, 1, Qt.AlignCenter)
        grid_layout.addWidget(self.block_device_table_widget, 1, 0)
        grid_layout.addWidget(self.mtp_device_table_widget, 1, 1)
        grid_layout.addWidget(self.unmount_button, 2, 0)
        grid_layout.addWidget(self.reload_mtp_list_button, 2, 1)
        return grid_layout

    def unmount_button_handler(self):
        """Unmount selected devices if they are not busy"""
        selected_fields = self.block_device_table_widget.selectedItems()
        for item in selected_fields:
            for device in self.usb_table:
                if item.text() == device[0] and len(device) > 2:
                    res = os.system("umount " + device[2])
                    if res:
                        self.connection_log.append(device[2] + "is busy")
                    else:
                        self.connection_log.append(device[2] + " is unmounted")
        self.usb_table = self.dev_finder.get_usb_table()
        self.update_table_widget(self.usb_table)

    def reload_device_table(self):
        """Gather info about connected devices"""
        new_usb_table = self.dev_finder.get_usb_table()
        self.remove_event_check(new_usb_table)
        self.connect_event_check(new_usb_table)
        if self.usb_table != new_usb_table:
            self.update_table_widget(new_usb_table)
            self.usb_table = new_usb_table
        QTimer.singleShot(self.table_update_interval, self.reload_device_table)

    def update_table_widget(self, new_usb_table):
        """Update connected devices table"""
        self.block_device_table_widget.clear()
        self.block_device_table_widget.setHorizontalHeaderLabels(self.block_header)
        self.block_device_table_widget.setRowCount(len(new_usb_table))
        i = 0
        for device in new_usb_table:
            j = 0
            for field in device:
                self.block_device_table_widget.setItem(i, j, QTableWidgetItem(field))
                j += 1
            i += 1

    def connect_event_check(self, new_usb_table):
        """Show message on device connection"""
        for new_table_device in new_usb_table:
            found = False
            for device in self.usb_table:
                if new_table_device[0] == device[0]:
                    found = True
                    break
            if not found:
                self.connection_log.append(new_table_device[1] + " was connected")

    def remove_event_check(self, new_usb_table):
        """Show message on device remove"""
        for device in self.usb_table:
            found = False
            for new_table_device in new_usb_table:
                if device[0] == new_table_device[0]:
                    found = True
                    break
            if not found:
                self.connection_log.append(device[1] + " was removed")
